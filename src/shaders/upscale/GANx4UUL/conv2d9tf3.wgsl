// Layer: Anime4K-v4.1-Upscale-GAN-x4-(UUL)-Conv-4x1x1x80
// Name: conv2d9tf3
// Inputs: ['conv2d_6_tf', 'conv2d_6_tf1', 'conv2d_6_tf2', 'conv2d_6_tf3', 'conv2d_6_tf4', 'conv2d_6_tf5', 'conv2d_8_tf', 'conv2d_1_tf', 'conv2d_4_tf', 'conv2d_7_tf']
// Output: conv2d_9_tf3
@group(0) @binding(0) var conv2d_6_tf_tex: texture_2d<f32>;
@group(0) @binding(1) var conv2d_6_tf1_tex: texture_2d<f32>;
@group(0) @binding(2) var conv2d_6_tf2_tex: texture_2d<f32>;
@group(0) @binding(3) var conv2d_6_tf3_tex: texture_2d<f32>;
@group(0) @binding(4) var conv2d_6_tf4_tex: texture_2d<f32>;
@group(0) @binding(5) var conv2d_6_tf5_tex: texture_2d<f32>;
@group(0) @binding(6) var conv2d_8_tf_tex: texture_2d<f32>;
@group(0) @binding(7) var conv2d_1_tf_tex: texture_2d<f32>;
@group(0) @binding(8) var conv2d_4_tf_tex: texture_2d<f32>;
@group(0) @binding(9) var conv2d_7_tf_tex: texture_2d<f32>;
@group(0) @binding(10) var conv2d_9_tf3_tex: texture_storage_2d<rgba16float, write>;
fn max4(vector: vec4f, value: f32) -> vec4f {
  return max(vector, vec4f(value));
}

fn g_0(pos: vec2u) -> vec4f {
  return max4(textureLoad(conv2d_6_tf_tex, pos, 0), 0.0);
}

fn g_1(pos: vec2u) -> vec4f {
  return max4(textureLoad(conv2d_6_tf1_tex, pos, 0), 0.0);
}

fn g_2(pos: vec2u) -> vec4f {
  return max4(textureLoad(conv2d_6_tf2_tex, pos, 0), 0.0);
}

fn g_3(pos: vec2u) -> vec4f {
  return max4(textureLoad(conv2d_6_tf3_tex, pos, 0), 0.0);
}

fn g_4(pos: vec2u) -> vec4f {
  return max4(textureLoad(conv2d_6_tf4_tex, pos, 0), 0.0);
}

fn g_5(pos: vec2u) -> vec4f {
  return max4(textureLoad(conv2d_6_tf5_tex, pos, 0), 0.0);
}

fn g_6(pos: vec2u) -> vec4f {
  return max4(-textureLoad(conv2d_6_tf_tex, pos, 0), 0.0);
}

fn g_7(pos: vec2u) -> vec4f {
  return max4(-textureLoad(conv2d_6_tf1_tex, pos, 0), 0.0);
}

fn g_8(pos: vec2u) -> vec4f {
  return max4(-textureLoad(conv2d_6_tf2_tex, pos, 0), 0.0);
}

fn g_9(pos: vec2u) -> vec4f {
  return max4(-textureLoad(conv2d_6_tf3_tex, pos, 0), 0.0);
}

fn g_10(pos: vec2u) -> vec4f {
  return max4(-textureLoad(conv2d_6_tf4_tex, pos, 0), 0.0);
}

fn g_11(pos: vec2u) -> vec4f {
  return max4(-textureLoad(conv2d_6_tf5_tex, pos, 0), 0.0);
}

fn g_12(pos: vec2u) -> vec4f {
  return max4(textureLoad(conv2d_8_tf_tex, pos, 0), 0.0);
}

fn g_13(pos: vec2u) -> vec4f {
  return max4(-textureLoad(conv2d_8_tf_tex, pos, 0), 0.0);
}

fn g_14(pos: vec2u) -> vec4f {
  return max4(textureLoad(conv2d_1_tf_tex, pos, 0), 0.0);
}

fn g_15(pos: vec2u) -> vec4f {
  return max4(-textureLoad(conv2d_1_tf_tex, pos, 0), 0.0);
}

fn g_16(pos: vec2u) -> vec4f {
  return max4(textureLoad(conv2d_4_tf_tex, pos, 0), 0.0);
}

fn g_17(pos: vec2u) -> vec4f {
  return max4(-textureLoad(conv2d_4_tf_tex, pos, 0), 0.0);
}

fn g_18(pos: vec2u) -> vec4f {
  return max4(textureLoad(conv2d_7_tf_tex, pos, 0), 0.0);
}

fn g_19(pos: vec2u) -> vec4f {
  return max4(-textureLoad(conv2d_7_tf_tex, pos, 0), 0.0);
}


@compute
@workgroup_size(8, 8)
fn computeMain(@builtin(global_invocation_id) pixel: vec3u) {
  // OOB check
  let dim_out: vec2u = textureDimensions(conv2d_9_tf3_tex);
  if (pixel.x >= dim_out.x || pixel.y >= dim_out.y) {
    return;
  }
  
  var result: vec4f = vec4f(0.0);
  result += mat4x4<f32>(0.12601118, -0.021590643, 0.22313827, 0.12338326, -0.3594248, 0.08779226, -0.104447536, 0.0015953421, -0.041181516, -0.059177034, -0.03233909, 0.08123608, -0.06653031, 0.2396167, -0.04595078, -0.27699965) * g_0(pixel.xy);
  result += mat4x4<f32>(0.21760523, -0.07761304, 0.10619168, 0.21848077, 0.043161202, -0.18573365, 0.18635494, 0.0596456, 0.00958352, 0.06870374, -0.22098882, -0.19535597, -0.01699866, -0.060843382, 0.020773342, -0.28626204) * g_1(pixel.xy);
  result += mat4x4<f32>(-0.054788332, 0.43804136, -0.018370852, -0.11884852, -0.08396486, -0.02463395, -0.07859437, 0.04820491, 0.20736758, -0.05558528, 0.30823594, -0.11240249, 0.3560334, -0.16470565, -0.037384707, -0.26869738) * g_2(pixel.xy);
  result += mat4x4<f32>(0.035860125, -0.19114108, -0.014263808, -0.2760586, -0.10599815, 0.24764514, -0.015626451, 0.06531905, 0.03168761, -0.06332368, -0.31058973, -0.04061597, -0.27505493, -0.1417053, -0.1537728, -0.0269434) * g_3(pixel.xy);
  result += mat4x4<f32>(0.122250065, 0.014169642, 0.0028120647, 0.29171073, 0.03466068, -0.21740533, 0.017244201, 0.10237153, 0.2732552, 0.08788669, -0.18837062, -0.08003779, -0.16058928, 0.16513692, 0.3796974, 0.14405341) * g_4(pixel.xy);
  result += mat4x4<f32>(0.07627521, 0.3994723, -0.2915726, -0.26149854, -0.17089921, 0.10311443, 0.118035555, 0.018972598, 0.060590137, 0.061291203, -0.08347645, 0.07799144, -0.2275661, -0.20265573, 0.008838914, -0.033791874) * g_5(pixel.xy);
  result += mat4x4<f32>(-0.26082832, -0.20043238, -0.12740612, 0.022172654, -0.19137274, 0.16447131, -0.12194309, 0.11332352, 0.09688869, -0.11694857, -0.014670798, 0.029100897, 0.27688727, -0.095532894, -0.046852726, 0.15528652) * g_6(pixel.xy);
  result += mat4x4<f32>(0.0843288, 0.2599002, 0.054038078, 0.030031947, -0.16868956, 0.47877824, -0.107127056, -0.19649811, 0.1452435, -0.061140474, -0.3746812, -0.1712981, 0.10090316, 0.003146686, 0.042054128, 0.2036839) * g_7(pixel.xy);
  result += mat4x4<f32>(0.062476937, 0.109727405, 0.006085406, -0.09609198, 0.08157408, 0.26440763, -0.010807875, 0.4100666, -0.29008973, -0.29712662, 0.1449313, 0.2999071, -0.10133186, 0.14511426, 0.15570813, 0.1363124) * g_8(pixel.xy);
  result += mat4x4<f32>(0.24777307, -0.018936818, -0.17767051, -0.2930885, -0.31651247, -0.21320899, 0.024395507, -0.14392355, -0.039903793, -0.028844833, 0.089801095, -0.16740274, 0.076601304, 0.12653774, -0.14753589, -0.076225005) * g_9(pixel.xy);
  result += mat4x4<f32>(-0.18826364, 0.011248587, -0.021409662, -0.5352774, -0.08067719, -0.054373614, -0.16357093, 0.06124252, 0.033611584, 0.042493146, 0.05371003, 0.11711034, 0.11154937, -0.12328775, -0.06294046, 0.18647408) * g_10(pixel.xy);
  result += mat4x4<f32>(0.0024605107, -0.056066483, 0.2467666, 0.11369053, 0.08489671, 0.0037346834, -0.013299427, 3.808174e-05, 0.11409715, 0.109892204, -0.06361007, -0.22800997, 0.18311475, 0.042961217, 0.06740135, -0.16150832) * g_11(pixel.xy);
  result += mat4x4<f32>(-0.18291046, 0.026666109, -0.30111808, 0.17123716, 0.112474516, -0.26450562, -0.090437375, -0.14988331, -0.18449861, 0.007934273, -0.027180828, -0.43781853, 0.0977631, 0.27554545, -0.11660859, -0.23798843) * g_12(pixel.xy);
  result += mat4x4<f32>(0.10251913, -0.18264107, -0.06369484, 0.05854778, -0.00926676, -0.29635468, -0.11716115, 0.011359037, 0.08007137, -0.049567226, 0.09789246, 0.36260337, -0.15627296, 0.22855914, 0.015385757, 0.083044454) * g_13(pixel.xy);
  result += mat4x4<f32>(0.1003519, 0.024577776, -0.108722664, 0.011721353, -0.10047615, -0.17745872, 0.10435663, -0.08427653, 0.0010758807, 0.14079982, -0.3041788, 0.15151088, 0.008969225, 0.076604255, -0.06943796, 0.044038422) * g_14(pixel.xy);
  result += mat4x4<f32>(0.05734037, 0.21680962, -0.11893755, -0.07738818, 0.13322085, -0.04214932, -0.3577641, 0.17797415, -0.07373375, 0.06449437, 0.065212585, 0.28000146, 0.13637395, 0.0667443, 0.040316172, -0.02156067) * g_15(pixel.xy);
  result += mat4x4<f32>(0.20441194, 0.23352884, -0.0139005985, -0.16409983, -0.38869008, 0.061168108, 0.01810069, 0.2682549, -0.07966706, 0.08529747, -0.093861535, 0.06709627, -0.23922135, 0.25731438, 0.0763321, -0.1010017) * g_16(pixel.xy);
  result += mat4x4<f32>(0.0023142244, -0.22895189, 0.07123541, -0.033806246, -0.49307954, 0.16494593, 0.011563014, 0.040604062, -0.18492593, -0.2750776, -0.13165577, 0.05981473, 0.03329094, -0.125094, -0.03672828, -0.019734263) * g_17(pixel.xy);
  result += mat4x4<f32>(-0.049260493, 0.1662821, -0.18388951, 0.23048894, 0.2072809, 0.06807784, -0.29648736, -0.10056884, -0.03960093, 0.46342513, -0.057403132, -0.00022476891, -0.0005029868, 0.43624368, -0.19841333, -0.18943238) * g_18(pixel.xy);
  result += mat4x4<f32>(-0.06875925, 0.19902602, 0.039521616, -0.025893142, 0.091499686, 0.020004159, 0.07892145, 0.12688632, 0.060283042, -0.11150475, 0.07054853, -0.1520924, -0.19681256, 0.07284978, 0.029370772, 0.22104816) * g_19(pixel.xy);
  result += vec4f(-0.0796562, -0.0549894, 0.3559776, 0.19150664);
  textureStore(conv2d_9_tf3_tex, pixel.xy, result);
}
