@group(0) @binding(0) var tex_0: texture_2d<f32>;
@group(0) @binding(1) var tex_1: texture_2d<f32>;
@group(0) @binding(2) var tex_2: texture_2d<f32>;
@group(0) @binding(3) var tex_3: texture_2d<f32>;
@group(0) @binding(4) var tex_4: texture_2d<f32>;
@group(0) @binding(5) var tex_5: texture_2d<f32>;
@group(0) @binding(6) var tex_6: texture_2d<f32>;

@group(0) @binding(7) var tex_out: texture_storage_2d<rgba16float, write>;

fn max4(vector: vec4f, value: f32) -> vec4f {
  return max(vector, vec4f(value));
}

// can we put texture into an array (2 functions instead of 14)?
fn g_0(pos: vec2u) -> vec4f {
  return max4(textureLoad(tex_0, pos, 0), 0.0);
}

fn g_1(pos: vec2u) -> vec4f {
  return max4(-textureLoad(tex_0, pos, 0), 0.0);
}

fn g_2(pos: vec2u) -> vec4f {
  return max4(textureLoad(tex_1, pos, 0), 0.0);
}

fn g_3(pos: vec2u) -> vec4f {
  return max4(-textureLoad(tex_1, pos, 0), 0.0);
}

fn g_4(pos: vec2u) -> vec4f {
  return max4(textureLoad(tex_2, pos, 0), 0.0);
}

fn g_5(pos: vec2u) -> vec4f {
  return max4(-textureLoad(tex_2, pos, 0), 0.0);
}

fn g_6(pos: vec2u) -> vec4f {
  return max4(textureLoad(tex_3, pos, 0), 0.0);
}

fn g_7(pos: vec2u) -> vec4f {
  return max4(-textureLoad(tex_3, pos, 0), 0.0);
}

fn g_8(pos: vec2u) -> vec4f {
  return max4(textureLoad(tex_4, pos, 0), 0.0);
}

fn g_9(pos: vec2u) -> vec4f {
  return max4(-textureLoad(tex_4, pos, 0), 0.0);
}

fn g_10(pos: vec2u) -> vec4f {
  return max4(textureLoad(tex_5, pos, 0), 0.0);
}

fn g_11(pos: vec2u) -> vec4f {
  return max4(-textureLoad(tex_5, pos, 0), 0.0);
}

fn g_12(pos: vec2u) -> vec4f {
  return max4(textureLoad(tex_6, pos, 0), 0.0);
}

fn g_13(pos: vec2u) -> vec4f {
  return max4(-textureLoad(tex_6, pos, 0), 0.0);
}


@compute
@workgroup_size(8, 8)
fn computeMain(@builtin(global_invocation_id) pixel: vec3u) {
  // OOB check
  let dim_out: vec2u = textureDimensions(tex_out);
  if (pixel.x >= dim_out.x || pixel.y >= dim_out.y) {
    return;
  }
  
  var result = mat4x4<f32>(-0.03203963, 0.012625379, -0.015731812, 0.01934081, 0.040269192, 0.06355962, 0.026060525, 0.024770064, 0.013291169, 0.036368445, 0.014430322, 0.048174843, -0.04100082, -0.11301496, -0.01512035, -0.12968759) * g_0(pixel.xy);
  result += mat4x4<f32>(0.083384864, 0.010284865, 0.0014147769, -0.0058197724, -0.049497265, -0.027643712, -0.02452052, -0.004834419, 0.00024621058, -0.04149765, 0.022549637, 0.01907756, 0.051630385, 0.046271153, 0.06621741, 0.06213355) * g_1(pixel.xy);
  result += mat4x4<f32>(0.03592716, 0.06960934, 0.039258648, 0.055528857, 0.039774194, 0.030444575, 0.009556282, -0.049838077, -0.13215798, -0.14297363, -0.1299766, -0.13833381, -0.02354993, -0.05251604, 0.06370487, 0.014982579) * g_2(pixel.xy);
  result += mat4x4<f32>(-0.052483108, -0.0465884, -0.05734048, -0.044421416, 0.0022415305, 0.0380222, -0.012731541, 0.05548879, 0.07215888, 0.09319826, 0.08444643, 0.10942869, -0.020208193, 0.022419268, -0.082369365, -0.06718921) * g_3(pixel.xy);
  result += mat4x4<f32>(0.085042566, 0.05402874, 0.07109829, 0.012440189, -0.00056668685, 0.077201664, -0.07645562, -0.0065426994, -0.016551742, 0.039741952, -0.08546126, 0.011569358, -0.018029, -0.0708575, -0.0051092226, -0.06613502) * g_4(pixel.xy);
  result += mat4x4<f32>(0.014473516, 0.06471411, -0.109876424, -0.10161449, -0.006772723, 0.01944313, 0.05662042, 0.03279107, 0.079842456, -0.03113039, -0.06561014, -0.12358709, -0.04165135, -0.0041241474, 0.013571383, 0.022914797) * g_5(pixel.xy);
  result += mat4x4<f32>(-0.004620971, -0.035017263, 0.019463848, 0.022293072, -0.09611277, -0.037571304, 0.025271876, 0.05271664, -0.094556056, -0.08180956, -0.0023080425, -0.08386168, 0.072075345, 0.043343827, 0.029228963, -0.0745529) * g_6(pixel.xy);
  result += mat4x4<f32>(-0.08594209, -0.1486261, -0.0033100976, -0.09926667, 0.004597467, -0.06498222, -0.0072805905, -0.046663295, 0.010520682, 0.09522635, 0.047422618, 0.04686724, 0.0049615214, -0.070131496, -0.038736176, 0.027141714) * g_7(pixel.xy);
  result += mat4x4<f32>(0.068141095, -0.009222132, -0.09298968, -0.022981714, -0.11794498, -0.24883682, 0.06285758, -0.040530503, 0.023102041, -0.108376004, -0.0947533, 0.011852517, 0.13540526, 0.082098365, -0.017887602, -0.0168834) * g_8(pixel.xy);
  result += mat4x4<f32>(-0.056527253, -0.0028296846, 0.17043272, 0.01559117, -0.05693428, 0.17201194, 0.13481094, 0.20069869, 0.07975364, 0.15567626, 0.014267647, -0.1647196, -0.067929946, -0.060350247, 0.04606933, -0.080939464) * g_9(pixel.xy);
  result += mat4x4<f32>(-0.12796874, -0.059804168, 0.038161963, 0.11338205, 0.12449382, -0.063439354, -0.027544323, -0.030887483, -0.06469375, -0.13027595, 0.019439653, 0.12102275, 0.10306811, 0.20515186, -0.11600495, -0.017482607) * g_10(pixel.xy);
  result += mat4x4<f32>(0.13160959, 0.022079693, -0.12674521, -0.013941859, -0.03285099, 0.10889952, -0.108865075, 0.02437333, 0.05444826, -0.019505689, 0.06490676, -0.10266784, 0.0196239, -0.2045733, 0.08500317, 0.12041114) * g_11(pixel.xy);
  result += mat4x4<f32>(0.038999576, 0.11392652, 0.018239606, -0.07527914, 0.2424234, -0.14988343, 0.08443514, -0.09385597, -0.06814398, -0.13903786, 0.07403476, -0.037108265, -0.0139128985, 0.09602558, 0.028035937, -0.15235782) * g_12(pixel.xy);
  result += mat4x4<f32>(-0.111720346, -0.017848942, -0.10032179, 0.16303523, -0.1107667, 0.013318661, 0.025533743, -0.030419175, -0.10123028, 0.2987671, -0.1901437, 0.20649679, 0.02757003, -0.092585176, 0.06945392, 0.14909884) * g_13(pixel.xy);
  result += vec4f(-0.0019922925, -0.031558692, -0.012974283, -0.030921914);

  // Store the result
  textureStore(tex_out, vec2u(pixel.x, pixel.y), result);
}
