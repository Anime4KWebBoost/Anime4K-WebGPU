@group(0) @binding(0) var tex_0: texture_2d<f32>;
@group(0) @binding(1) var tex_1: texture_2d<f32>;
@group(0) @binding(2) var tex_2: texture_2d<f32>;
@group(0) @binding(3) var tex_3: texture_2d<f32>;
@group(0) @binding(4) var tex_4: texture_2d<f32>;
@group(0) @binding(5) var tex_5: texture_2d<f32>;
@group(0) @binding(6) var tex_6: texture_2d<f32>;

@group(0) @binding(7) var tex_out: texture_storage_2d<rgba16float, write>;

fn max4(vector: vec4f, value: f32) -> vec4f {
  return max(vector, vec4f(value));
}

// can we put texture into an array (2 functions instead of 14)?
fn g_0(pos: vec2u) -> vec4f {
  return max4(textureLoad(tex_0, pos, 0), 0.0);
}

fn g_1(pos: vec2u) -> vec4f {
  return max4(-textureLoad(tex_0, pos, 0), 0.0);
}

fn g_2(pos: vec2u) -> vec4f {
  return max4(textureLoad(tex_1, pos, 0), 0.0);
}

fn g_3(pos: vec2u) -> vec4f {
  return max4(-textureLoad(tex_1, pos, 0), 0.0);
}

fn g_4(pos: vec2u) -> vec4f {
  return max4(textureLoad(tex_2, pos, 0), 0.0);
}

fn g_5(pos: vec2u) -> vec4f {
  return max4(-textureLoad(tex_2, pos, 0), 0.0);
}

fn g_6(pos: vec2u) -> vec4f {
  return max4(textureLoad(tex_3, pos, 0), 0.0);
}

fn g_7(pos: vec2u) -> vec4f {
  return max4(-textureLoad(tex_3, pos, 0), 0.0);
}

fn g_8(pos: vec2u) -> vec4f {
  return max4(textureLoad(tex_4, pos, 0), 0.0);
}

fn g_9(pos: vec2u) -> vec4f {
  return max4(-textureLoad(tex_4, pos, 0), 0.0);
}

fn g_10(pos: vec2u) -> vec4f {
  return max4(textureLoad(tex_5, pos, 0), 0.0);
}

fn g_11(pos: vec2u) -> vec4f {
  return max4(-textureLoad(tex_5, pos, 0), 0.0);
}

fn g_12(pos: vec2u) -> vec4f {
  return max4(textureLoad(tex_6, pos, 0), 0.0);
}

fn g_13(pos: vec2u) -> vec4f {
  return max4(-textureLoad(tex_6, pos, 0), 0.0);
}

@compute
@workgroup_size(8, 8)
fn computeMain(@builtin(global_invocation_id) pixel: vec3u) {
  // OOB check
  let dim_out: vec2u = textureDimensions(tex_out);
  if (pixel.x >= dim_out.x || pixel.y >= dim_out.y) {
    return;
  }
  
  var result = mat4x4<f32>(0.0078015737, -0.1069858, -0.08214693, -0.19662377, -0.24679859, -0.259798, -0.2825307, -0.3002897, -0.033170536, 0.009037076, -0.06471358, -0.008062548, 0.33933204, 0.35258317, 0.42240462, 0.39983308) * g_0(pixel.xy);
  result += mat4x4<f32>(-0.010697483, 0.081293896, 0.036631033, 0.18007624, 0.19054145, 0.24917243, 0.18648013, 0.2489242, -0.017479975, -0.043114778, 0.011919171, 0.025444604, -0.3097963, -0.21695957, -0.27833402, -0.18391538) * g_1(pixel.xy);
  result += mat4x4<f32>(-0.25040805, -0.23631427, -0.25025168, -0.24865435, 0.042065173, 0.083157755, 0.061137203, 0.071588814, -0.044977773, 0.008478686, -0.00084282836, 0.049453374, -0.032142013, -0.08026673, -0.08853224, -0.1216394) * g_2(pixel.xy);
  result += mat4x4<f32>(0.18268804, 0.17796996, 0.20164566, 0.19135785, -0.035876144, -0.06757642, -0.064864054, -0.090898216, 0.042896114, 0.00054021174, 0.0074260943, -0.035815943, 0.069839485, 0.121482305, 0.09711192, 0.10492122) * g_3(pixel.xy);
  result += mat4x4<f32>(0.06319654, 0.09393101, 0.028855225, 0.06821149, -0.08000093, -0.020028021, -0.03671945, 0.017522326, -0.018603487, -0.035996117, -0.0976101, -0.090490334, -0.014328419, -0.030903641, 0.025069723, -0.0035409883) * g_4(pixel.xy);
  result += mat4x4<f32>(-0.0020061978, -0.013291817, -0.041149486, -0.10289244, 0.024184963, 0.034944274, 0.014290865, -0.011308398, 0.09837517, 0.0998194, 0.05841568, 0.1001512, -0.027776875, -0.023589013, -0.005636875, -0.0064647263) * g_5(pixel.xy);
  result += mat4x4<f32>(-0.029324658, -0.03390079, -0.00022918812, 0.015080682, -0.023656078, -0.013858318, 0.023292018, 0.00061927625, -0.08198919, -0.043944865, 0.018253015, 0.0036559834, 0.08720356, 0.04782466, 0.057039097, -0.039048817) * g_6(pixel.xy);
  result += mat4x4<f32>(-9.105729e-05, -0.04331058, 0.038882393, -0.010137616, -0.010911734, -0.03208449, 0.02824511, 0.027689938, 0.052123386, 0.07206957, 0.026071645, -0.023875356, -0.03838205, -0.056557115, -0.03913256, 0.03652393) * g_7(pixel.xy);
  result += mat4x4<f32>(0.069563136, -0.0012880678, -0.052812636, -0.022333166, -0.04461301, -0.10861375, 0.07419778, 0.035370655, 0.01702869, -0.05196944, -0.058625046, 0.041409995, 0.07369974, 0.033218417, -0.029440258, -0.028367113) * g_8(pixel.xy);
  result += mat4x4<f32>(-0.044799328, -0.0057474473, 0.11498554, 0.019316392, -0.0962131, 0.036443487, 0.04333048, 0.06405375, 0.08939619, 0.082270615, 0.021189885, -0.15693638, -0.05184121, -0.034860216, 0.04559894, -0.021655124) * g_9(pixel.xy);
  result += mat4x4<f32>(-0.11721688, -0.05531037, 0.013229716, 0.07984346, 0.15896061, 0.0013449837, 0.0035146866, -0.022993533, -0.04364348, -0.07877339, 0.014994648, 0.093894236, 0.017005067, 0.08363463, -0.10174244, -0.03644556) * g_10(pixel.xy);
  result += mat4x4<f32>(0.11331717, 0.043665934, -0.08172703, -0.00242159, -0.11465893, 0.013738912, -0.104767494, 0.015051101, 0.050871555, -0.016916635, 0.03737477, -0.0832486, 0.04717599, -0.09404747, 0.06971056, 0.090383) * g_11(pixel.xy);
  result += mat4x4<f32>(0.0304174, 0.08579437, 0.0119016655, -0.046921503, 0.15475388, -0.106115945, 0.046624437, -0.06969833, -0.054273132, -0.103994764, 0.05259161, -0.027331285, -0.006395205, 0.07532883, 0.02790517, -0.09288012) * g_12(pixel.xy);
  result += mat4x4<f32>(-0.08568432, -0.0353462, -0.075286664, 0.099043466, -0.06930279, 0.009565153, 0.026108846, -0.016375825, -0.0596071, 0.20451383, -0.13568212, 0.1307245, 0.01610393, -0.06642206, 0.03890225, 0.09259684) * g_13(pixel.xy);
  result += vec4f(0.10899447, 0.10118224, 0.155225, 0.15036581);

  // Store the result
  textureStore(tex_out, vec2u(pixel.x, pixel.y), result);
}
